syntax = "proto3";

package chat;

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

service MessageService {
	//Return the history of messages for an conversation in DESC order.
	rpc GetHistory(GetHistoryRequest) returns (GetHistoryResponse) {}

	//Notifies the reading of messages from a channel or a user.
	rpc ReadHistory(ReadHistoryRequest) returns (google.protobuf.Empty) {}

	//Send and receive Messages or events to/from conversations.
	rpc Comunicate(stream ChatMessage) returns (stream ChatMessage) {}
}

service ConversationService {
	// Return conversations ordered by last update date
	rpc Get(GetConversationsRequest) returns (GetConversationsResponse) {}

	rpc Create(CreateConversationRequest) returns (CreateConversationResponse) {}

	rpc Leave(LeaveConversationRequest) returns (google.protobuf.Empty) {}

	rpc AddMember(MemberRequest) returns (google.protobuf.Empty) {}

	rpc RemoveMember(MemberRequest) returns (google.protobuf.Empty) {}
}

message Conversation {
	enum ConversationType {
		INDIVIDUAL= 0;
		GROUP= 1;
	}
	string uid = 1;
	string title = 2;
	ConversationType type = 3;
	// Collection with member uids  
	repeated string member_uids = 4;
	bytes image = 5;
	google.protobuf.Timestamp creation_time = 20;
	// Last update time (changes on conversations or last message time sent)
	google.protobuf.Timestamp update_time = 21;
}

message Message {
	string uid = 1;
	string sender_uid = 2;
	oneof content {
		ActionEvent event = 3;
		string text = 5;
		bytes audio = 6;
		bytes image = 7;
	}
	google.protobuf.Timestamp creation_time = 8;
	google.protobuf.Timestamp delivery_time = 9;
}

message ActionEvent {
	enum EventType {
		CREATED_GROUP = 0;
		UPDATED_GROUP = 1;
		JOIN_GROUP = 2;
		LEAVE_GROUP = 3;
		ADD_MEMBER = 4;
		REMOVE_MEMBER = 5;
		EDIT_TITLE = 6;
	}
	EventType event = 1;
	// Extra key:value data to provide more context to events
	// this will vary by EventType
	// example: `{ "oldTitle": "Foo", "newTitle":"Bar" }`
	map<string, string> extra_params = 2;
}

message TypingMessage {
	enum ActionType {
		CANCEL_TYPING = 0;
		TYPING = 1;
		RECORDING_AUDIO = 2;
		UPLOADING_AUDIO = 3;
		UPLOADING_PHOTO = 4;
	}
	string sender_uid = 1;
	ActionType type = 2;
}

message CreateConversationRequest {
	string title = 1;
	Conversation.ConversationType type = 2;
	repeated string member_uids = 3;
	bytes image = 4;
}

message CreateConversationResponse {
	Conversation conversation = 1;
}

message GetConversationsRequest {
	int32 limit = 1;
	int32 offset = 2;
	repeated string uid = 3;
}

message GetConversationsResponse {
	repeated Conversation conversations = 1;
}

message LeaveConversationRequest {
	string conversation_uid = 1;
}

message MemberRequest {
	string conversation_uid = 1;
	string user_uid = 2;
}

message ChatMessage {
	string conversation_uid = 1;
	oneof content {
		TypingMessage typing = 2;
		Message message = 3;
	}
}

message GetHistoryRequest {
	int32 limit = 1;
	int32 offset = 2;
	string conversation_uid = 3;
}

message GetHistoryResponse {
	repeated Message messages = 1;
}

message ReadHistoryRequest {
	string last_message_uid = 1;
	string conversation_uid = 2;
}