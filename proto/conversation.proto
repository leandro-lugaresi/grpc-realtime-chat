syntax = "proto3";

package chat;

import "google/api/annotations.proto";
import "google/rpc/status.proto";
import "google/protobuf/timestamp.proto";
import "user.proto";

service MessageService {
    //Return the history of messages for an conversation in DESC order.
    rpc GetHistory(GetHistoryRequest) returns (GetHistoryResponse) {}

    //Notifies the reading of messages from a channel or a user.
    rpc ReadHistory(ReadHistoryRequest) returns (StatusResponse) {}

    //Send and receive Messages or events to/from conversations.
    rpc Comunicate(stream ChatMessage) returns (stream ChatMessage) {}
}

service ConversationService {
    // Return conversations ordered by last update date
    rpc Get(GetConversationsRequest) returns (GetConversationsResponse) {}

    rpc CreateGroup(CreateConversationRequest) returns (StatusResponse) {}

    rpc Leave(LeaveConversationRequest) returns (StatusResponse) {}

    rpc AddMember(AddMemberRequest) returns (StatusResponse) {}

    rpc RemoveMember(RemoveMemberRequest) returns (StatusResponse) {}
}

message Conversation {
    enum ConversationType {
        INDIVIDUAL= 0;
        GROUP= 1;
    }
    string uid = 1;
    string title = 2;
    ConversationType type = 3;
    repeated User members = 4;
    bytes image = 5;
    google.protobuf.Timestamp creation_time = 20;
    // Last update time (changes on conversations or last message time sent)
    google.protobuf.Timestamp update_time = 21;
}

message Message {
    string uid = 1;
    User sender = 2;
    oneof content {
        ActionEvent event = 3;
        string text = 5;
        bytes audio = 6;
        bytes image = 7;
    }
    google.protobuf.Timestamp creation_time = 8;
    google.protobuf.Timestamp delivery_time = 9;
}

message ActionEvent {
    enum EventType {
        CREATED_GROUP = 0;
        UPDATED_GROUP = 1;
        JOIN_GROUP = 2;
        LEAVE_GROUP = 3;
        ADD_MEMBER = 4;
        REMOVE_MEMBER = 5;
        EDIT_TITLE = 6;
    }
    EventType event = 1;
    // Extra key:value data to provide more context to events
    // this will vary by EventType
    // example: `{ "oldTitle": "Foo", "newTitle":"Bar" }`
    map<string, string> extra_params = 2;
}

message TypingMessage {
    enum ActionType {
        CANCEL_TYPING = 0;
        TYPING = 1;
        RECORDING_AUDIO = 2;
        UPLOADING_AUDIO = 3;
        UPLOADING_PHOTO = 4;
    }
    User sender = 1;
    ActionType type = 2;
}

message CreateConversationRequest {

}

message GetConversationsRequest {
    int32 limit = 1;
    int32 offset = 2;
    string filter = 3;
}

message GetConversationsResponse {
    repeated Conversation conversations = 1;
}

message LeaveConversationRequest {
    string conversation_uid = 1;
}

message AddMemberRequest {
    string conversation_uid = 1;
    string user_uid = 2;
}

message RemoveMemberRequest {
    string conversation_uid = 1;
    string user_uid = 2;
}

message StatusResponse  {
    bool ack = 1;
    google.rpc.status status = 2;
}

message ChatMessage {
    Conversation conversation = 1;
    oneof content {
        TypingMessage typing = 2;
        Message message = 3;
    }
}

message GetHistoryRequest {
    int32 limit = 1;
    int32 offset = 2;
    string conversation_uid = 1;
}

message GetHistoryResponse {
    repeated Message messages = 1;
}

message ReadHistoryRequest {
    string last_message_uid = 1;
    string conversation_uid = 2;
}