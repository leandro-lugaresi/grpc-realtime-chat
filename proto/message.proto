syntax = "proto3";

package chat;

import "google/api/annotations.proto";
import "google/rpc/status.proto";
import "google/protobuf/timestamp.proto";
import "user.proto";
import "chat.proto";

service Message {
    //Return the history of messages for an user or channel in DESC order.
    rpc GetHistory(GetHistoryRequest) returns (GetHistoryResponse) {}

    //Notifies the reading of messages from a channel or a user.
    rpc ReadHistory(ReadHistoryRequest) returns (StatusResponse) {}

    //Send Messages or events to channels or users and
    // receive messages or evets from channels or users.
    rpc Comunicate(stream ChatMessage) returns (stream ChatMessage) {}
}

message Message {
    string uid = 1;
    User sender = 2;
    enum EventType {
        CANCEL_TYPING = 0;
        TYPING = 1;
        RECORDING_AUDIO = 2;
        UPLOAD_AUDIO = 3;
        UPLOAD_PHOTO = 4;
        JOIN_CHANNEL = 5;
        EXIT_CHANNEL = 6;
    }
    EventType type = 3;
    oneof content {
        string text = 5;
        bytes audio = 6;
        bytes image = 7;
    }
    google.protobuf.Timestamp creation_time = 8;
    bool readed = 9;
}

message ChatMessage {
    oneof target {
        string user_uid = 1;
        string channel_uid = 2;
    }
    Message message = 3;
}

message GetHistoryRequest {
    int32 limit = 1;
    int32 offset = 2;
    oneof target {
        string user_uid = 3;
        string channel_uid = 4;
    }
}

message GetHistoryResponse {
    repeated Message messages = 1;
}

message ReadHistoryRequest {
    string last_id = 1;
    oneof target {
        string user_uid = 3;
        string channel_uid = 4;
    }
}