// Code generated by protoc-gen-go.
// source: user.proto
// DO NOT EDIT!

/*
Package user is a generated protocol buffer package.

It is generated from these files:
	user.proto

It has these top-level messages:
	User
	UserRef
	SignUpRequest
	Token
	SignInRequest
	UpdateProfileRequest
	GetUsersRequest
	GetUsersResponse
	ChangePasswordRequest
*/
package user

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type User struct {
	Uid      string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Username string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
	Photo    []byte `protobuf:"bytes,4,opt,name=photo,proto3" json:"photo,omitempty"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type UserRef struct {
	Uid string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
}

func (m *UserRef) Reset()                    { *m = UserRef{} }
func (m *UserRef) String() string            { return proto.CompactTextString(m) }
func (*UserRef) ProtoMessage()               {}
func (*UserRef) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type SignUpRequest struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Username string `protobuf:"bytes,2,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password" json:"password,omitempty"`
	Photo    []byte `protobuf:"bytes,7,opt,name=photo,proto3" json:"photo,omitempty"`
}

func (m *SignUpRequest) Reset()                    { *m = SignUpRequest{} }
func (m *SignUpRequest) String() string            { return proto.CompactTextString(m) }
func (*SignUpRequest) ProtoMessage()               {}
func (*SignUpRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type Token struct {
	Token string `protobuf:"bytes,1,opt,name=token" json:"token,omitempty"`
}

func (m *Token) Reset()                    { *m = Token{} }
func (m *Token) String() string            { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()               {}
func (*Token) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type SignInRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password" json:"password,omitempty"`
}

func (m *SignInRequest) Reset()                    { *m = SignInRequest{} }
func (m *SignInRequest) String() string            { return proto.CompactTextString(m) }
func (*SignInRequest) ProtoMessage()               {}
func (*SignInRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type UpdateProfileRequest struct {
	Username string `protobuf:"bytes,1,opt,name=username" json:"username,omitempty"`
	Name     string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Photo    []byte `protobuf:"bytes,3,opt,name=photo,proto3" json:"photo,omitempty"`
}

func (m *UpdateProfileRequest) Reset()                    { *m = UpdateProfileRequest{} }
func (m *UpdateProfileRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateProfileRequest) ProtoMessage()               {}
func (*UpdateProfileRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type GetUsersRequest struct {
	Ids      []*UserRef `protobuf:"bytes,1,rep,name=ids" json:"ids,omitempty"`
	Name     string     `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Username string     `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
}

func (m *GetUsersRequest) Reset()                    { *m = GetUsersRequest{} }
func (m *GetUsersRequest) String() string            { return proto.CompactTextString(m) }
func (*GetUsersRequest) ProtoMessage()               {}
func (*GetUsersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetUsersRequest) GetIds() []*UserRef {
	if m != nil {
		return m.Ids
	}
	return nil
}

type GetUsersResponse struct {
	Users []*User `protobuf:"bytes,1,rep,name=users" json:"users,omitempty"`
}

func (m *GetUsersResponse) Reset()                    { *m = GetUsersResponse{} }
func (m *GetUsersResponse) String() string            { return proto.CompactTextString(m) }
func (*GetUsersResponse) ProtoMessage()               {}
func (*GetUsersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetUsersResponse) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

type ChangePasswordRequest struct {
	OldPassword string `protobuf:"bytes,1,opt,name=old_password,json=oldPassword" json:"old_password,omitempty"`
	NewPassword string `protobuf:"bytes,2,opt,name=new_password,json=newPassword" json:"new_password,omitempty"`
}

func (m *ChangePasswordRequest) Reset()                    { *m = ChangePasswordRequest{} }
func (m *ChangePasswordRequest) String() string            { return proto.CompactTextString(m) }
func (*ChangePasswordRequest) ProtoMessage()               {}
func (*ChangePasswordRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func init() {
	proto.RegisterType((*User)(nil), "user.User")
	proto.RegisterType((*UserRef)(nil), "user.UserRef")
	proto.RegisterType((*SignUpRequest)(nil), "user.SignUpRequest")
	proto.RegisterType((*Token)(nil), "user.Token")
	proto.RegisterType((*SignInRequest)(nil), "user.SignInRequest")
	proto.RegisterType((*UpdateProfileRequest)(nil), "user.UpdateProfileRequest")
	proto.RegisterType((*GetUsersRequest)(nil), "user.GetUsersRequest")
	proto.RegisterType((*GetUsersResponse)(nil), "user.GetUsersResponse")
	proto.RegisterType((*ChangePasswordRequest)(nil), "user.ChangePasswordRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for UserService service

type UserServiceClient interface {
	SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*Token, error)
	SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*Token, error)
	UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error)
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type userServiceClient struct {
	cc *grpc.ClientConn
}

func NewUserServiceClient(cc *grpc.ClientConn) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) SignUp(ctx context.Context, in *SignUpRequest, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := grpc.Invoke(ctx, "/user.UserService/SignUp", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) SignIn(ctx context.Context, in *SignInRequest, opts ...grpc.CallOption) (*Token, error) {
	out := new(Token)
	err := grpc.Invoke(ctx, "/user.UserService/SignIn", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateProfile(ctx context.Context, in *UpdateProfileRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/user.UserService/UpdateProfile", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) GetUsers(ctx context.Context, in *GetUsersRequest, opts ...grpc.CallOption) (*GetUsersResponse, error) {
	out := new(GetUsersResponse)
	err := grpc.Invoke(ctx, "/user.UserService/GetUsers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/user.UserService/ChangePassword", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for UserService service

type UserServiceServer interface {
	SignUp(context.Context, *SignUpRequest) (*Token, error)
	SignIn(context.Context, *SignInRequest) (*Token, error)
	UpdateProfile(context.Context, *UpdateProfileRequest) (*google_protobuf.Empty, error)
	GetUsers(context.Context, *GetUsersRequest) (*GetUsersResponse, error)
	ChangePassword(context.Context, *ChangePasswordRequest) (*google_protobuf.Empty, error)
}

func RegisterUserServiceServer(s *grpc.Server, srv UserServiceServer) {
	s.RegisterService(&_UserService_serviceDesc, srv)
}

func _UserService_SignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignUpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/SignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SignUp(ctx, req.(*SignUpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_SignIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SignInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SignIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/SignIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SignIn(ctx, req.(*SignInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/UpdateProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateProfile(ctx, req.(*UpdateProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_GetUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUsersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).GetUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/GetUsers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).GetUsers(ctx, req.(*GetUsersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/user.UserService/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "user.UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SignUp",
			Handler:    _UserService_SignUp_Handler,
		},
		{
			MethodName: "SignIn",
			Handler:    _UserService_SignIn_Handler,
		},
		{
			MethodName: "UpdateProfile",
			Handler:    _UserService_UpdateProfile_Handler,
		},
		{
			MethodName: "GetUsers",
			Handler:    _UserService_GetUsers_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _UserService_ChangePassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("user.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 444 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x8d, 0x3f, 0xd2, 0x86, 0x71, 0x03, 0xd5, 0xd2, 0x56, 0x96, 0x23, 0x84, 0xd9, 0x53, 0x0e,
	0xc8, 0x95, 0x0a, 0x37, 0x8e, 0xa8, 0x8a, 0x7a, 0xab, 0x5c, 0x72, 0x03, 0x2a, 0x07, 0x4f, 0x5c,
	0x0b, 0x77, 0xd7, 0xf5, 0xda, 0x44, 0xfc, 0x31, 0x7e, 0x1f, 0xda, 0x5d, 0xaf, 0x6b, 0x9b, 0x14,
	0xc1, 0x6d, 0x3e, 0x9e, 0xe6, 0xbd, 0x79, 0xb3, 0x0b, 0xd0, 0x08, 0xac, 0xa2, 0xb2, 0xe2, 0x35,
	0x27, 0xae, 0x8c, 0x83, 0x45, 0xc6, 0x79, 0x56, 0xe0, 0xb9, 0xaa, 0x6d, 0x9a, 0xed, 0x39, 0xde,
	0x97, 0xf5, 0x4f, 0x0d, 0xa1, 0x5f, 0xc1, 0x5d, 0x0b, 0xac, 0xc8, 0x31, 0x38, 0x4d, 0x9e, 0xfa,
	0x56, 0x68, 0x2d, 0x9f, 0xc5, 0x32, 0x24, 0x04, 0x5c, 0x96, 0xdc, 0xa3, 0x6f, 0xab, 0x92, 0x8a,
	0x49, 0x00, 0x33, 0x39, 0x52, 0xd5, 0x1d, 0x55, 0xef, 0x72, 0x72, 0x02, 0xd3, 0xf2, 0x8e, 0xd7,
	0xdc, 0x77, 0x43, 0x6b, 0x79, 0x14, 0xeb, 0x84, 0x2e, 0xe0, 0x50, 0xce, 0x8f, 0x71, 0xfb, 0x27,
	0x05, 0x7d, 0x80, 0xf9, 0x4d, 0x9e, 0xb1, 0x75, 0x19, 0xe3, 0x43, 0x83, 0xa2, 0xee, 0x38, 0xad,
	0x27, 0x38, 0xed, 0x11, 0x67, 0x00, 0xb3, 0x32, 0x11, 0x62, 0xc7, 0xab, 0xd4, 0xe8, 0x31, 0xf9,
	0xa3, 0x9e, 0xc3, 0xbe, 0x9e, 0x57, 0x30, 0xfd, 0xc4, 0xbf, 0x23, 0x93, 0xed, 0x5a, 0x06, 0x2d,
	0x97, 0x4e, 0xe8, 0x4a, 0x2b, 0xba, 0x62, 0x46, 0x51, 0x9f, 0xdd, 0xfa, 0x0b, 0xbb, 0x3d, 0x64,
	0xa7, 0x9f, 0xe1, 0x64, 0x5d, 0xa6, 0x49, 0x8d, 0xd7, 0x15, 0xdf, 0xe6, 0x05, 0xfe, 0xcb, 0xbc,
	0x7d, 0x8e, 0x77, 0x5b, 0x38, 0xfd, 0x2d, 0x36, 0xf0, 0x62, 0x85, 0xb5, 0x34, 0x56, 0x98, 0xc1,
	0xaf, 0xc1, 0xc9, 0x53, 0xe1, 0x5b, 0xa1, 0xb3, 0xf4, 0x2e, 0xe6, 0x91, 0x7a, 0x05, 0xad, 0xf3,
	0xb1, 0xec, 0xfc, 0xef, 0x3d, 0xe9, 0x7b, 0x38, 0x7e, 0xe4, 0x10, 0x25, 0x67, 0x02, 0x49, 0x08,
	0x53, 0xd9, 0x37, 0x34, 0xd0, 0xa3, 0xd1, 0x0d, 0xfa, 0x05, 0x4e, 0x3f, 0xde, 0x25, 0x2c, 0xc3,
	0xeb, 0xd6, 0x09, 0xa3, 0xef, 0x0d, 0x1c, 0xf1, 0x22, 0xbd, 0xed, 0x0c, 0xd3, 0xcb, 0x7b, 0xbc,
	0x48, 0x0d, 0x52, 0x42, 0x18, 0xee, 0x6e, 0x47, 0x9e, 0x7a, 0x0c, 0x77, 0x06, 0x72, 0xf1, 0xcb,
	0x06, 0x4f, 0xd2, 0xdd, 0x60, 0xf5, 0x23, 0xff, 0x86, 0xe4, 0x2d, 0x1c, 0xe8, 0x17, 0x44, 0x5e,
	0x6a, 0x2d, 0x83, 0xf7, 0x14, 0x78, 0xba, 0xa8, 0x2e, 0x4e, 0x27, 0x06, 0x7d, 0xc5, 0xfa, 0xe8,
	0xee, 0xd6, 0x63, 0xf4, 0x25, 0xcc, 0x07, 0x27, 0x24, 0x41, 0xbb, 0xee, 0x9e, 0xbb, 0x06, 0x67,
	0x91, 0xfe, 0x65, 0x91, 0xf9, 0x65, 0xd1, 0xa5, 0xfc, 0x65, 0x74, 0x42, 0x3e, 0xc0, 0xcc, 0xf8,
	0x48, 0x4e, 0xf5, 0x84, 0xd1, 0xed, 0x82, 0xb3, 0x71, 0x59, 0xdb, 0x4d, 0x27, 0x64, 0x05, 0xcf,
	0x87, 0x76, 0x92, 0x85, 0xc6, 0xee, 0x35, 0xf9, 0x69, 0x15, 0x9b, 0x03, 0x55, 0x79, 0xf7, 0x3b,
	0x00, 0x00, 0xff, 0xff, 0xbd, 0xaf, 0x8f, 0x8b, 0x1f, 0x04, 0x00, 0x00,
}
