// Code generated by protoc-gen-go.
// source: chat.proto
// DO NOT EDIT!

/*
Package chat is a generated protocol buffer package.

It is generated from these files:
	chat.proto

It has these top-level messages:
	Conversation
	Message
	ActionEvent
	TypingMessage
	CreateConversationRequest
	CreateConversationResponse
	GetConversationsRequest
	GetConversationsResponse
	LeaveConversationRequest
	MemberRequest
	ChatMessage
	GetHistoryRequest
	GetHistoryResponse
	ReadHistoryRequest
*/
package chat

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Conversation_ConversationType int32

const (
	Conversation_INDIVIDUAL Conversation_ConversationType = 0
	Conversation_GROUP      Conversation_ConversationType = 1
)

var Conversation_ConversationType_name = map[int32]string{
	0: "INDIVIDUAL",
	1: "GROUP",
}
var Conversation_ConversationType_value = map[string]int32{
	"INDIVIDUAL": 0,
	"GROUP":      1,
}

func (x Conversation_ConversationType) String() string {
	return proto.EnumName(Conversation_ConversationType_name, int32(x))
}
func (Conversation_ConversationType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{0, 0}
}

type ActionEvent_EventType int32

const (
	ActionEvent_CREATED_GROUP ActionEvent_EventType = 0
	ActionEvent_UPDATED_GROUP ActionEvent_EventType = 1
	ActionEvent_JOIN_GROUP    ActionEvent_EventType = 2
	ActionEvent_LEAVE_GROUP   ActionEvent_EventType = 3
	ActionEvent_ADD_MEMBER    ActionEvent_EventType = 4
	ActionEvent_REMOVE_MEMBER ActionEvent_EventType = 5
	ActionEvent_EDIT_TITLE    ActionEvent_EventType = 6
)

var ActionEvent_EventType_name = map[int32]string{
	0: "CREATED_GROUP",
	1: "UPDATED_GROUP",
	2: "JOIN_GROUP",
	3: "LEAVE_GROUP",
	4: "ADD_MEMBER",
	5: "REMOVE_MEMBER",
	6: "EDIT_TITLE",
}
var ActionEvent_EventType_value = map[string]int32{
	"CREATED_GROUP": 0,
	"UPDATED_GROUP": 1,
	"JOIN_GROUP":    2,
	"LEAVE_GROUP":   3,
	"ADD_MEMBER":    4,
	"REMOVE_MEMBER": 5,
	"EDIT_TITLE":    6,
}

func (x ActionEvent_EventType) String() string {
	return proto.EnumName(ActionEvent_EventType_name, int32(x))
}
func (ActionEvent_EventType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type TypingMessage_ActionType int32

const (
	TypingMessage_CANCEL_TYPING   TypingMessage_ActionType = 0
	TypingMessage_TYPING          TypingMessage_ActionType = 1
	TypingMessage_RECORDING_AUDIO TypingMessage_ActionType = 2
	TypingMessage_UPLOADING_AUDIO TypingMessage_ActionType = 3
	TypingMessage_UPLOADING_PHOTO TypingMessage_ActionType = 4
)

var TypingMessage_ActionType_name = map[int32]string{
	0: "CANCEL_TYPING",
	1: "TYPING",
	2: "RECORDING_AUDIO",
	3: "UPLOADING_AUDIO",
	4: "UPLOADING_PHOTO",
}
var TypingMessage_ActionType_value = map[string]int32{
	"CANCEL_TYPING":   0,
	"TYPING":          1,
	"RECORDING_AUDIO": 2,
	"UPLOADING_AUDIO": 3,
	"UPLOADING_PHOTO": 4,
}

func (x TypingMessage_ActionType) String() string {
	return proto.EnumName(TypingMessage_ActionType_name, int32(x))
}
func (TypingMessage_ActionType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type Conversation struct {
	Uid   string                        `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
	Title string                        `protobuf:"bytes,2,opt,name=title" json:"title,omitempty"`
	Type  Conversation_ConversationType `protobuf:"varint,3,opt,name=type,enum=chat.Conversation_ConversationType" json:"type,omitempty"`
	// Collection with member uids
	MemberUids   []string                    `protobuf:"bytes,4,rep,name=member_uids,json=memberUids" json:"member_uids,omitempty"`
	Image        []byte                      `protobuf:"bytes,5,opt,name=image,proto3" json:"image,omitempty"`
	CreationTime *google_protobuf1.Timestamp `protobuf:"bytes,20,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
	// Last update time (changes on conversations or last message time sent)
	UpdateTime *google_protobuf1.Timestamp `protobuf:"bytes,21,opt,name=update_time,json=updateTime" json:"update_time,omitempty"`
}

func (m *Conversation) Reset()                    { *m = Conversation{} }
func (m *Conversation) String() string            { return proto.CompactTextString(m) }
func (*Conversation) ProtoMessage()               {}
func (*Conversation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Conversation) GetCreationTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreationTime
	}
	return nil
}

func (m *Conversation) GetUpdateTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.UpdateTime
	}
	return nil
}

type Message struct {
	Uid       string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
	SenderUid string `protobuf:"bytes,2,opt,name=sender_uid,json=senderUid" json:"sender_uid,omitempty"`
	// Types that are valid to be assigned to Content:
	//	*Message_Event
	//	*Message_Text
	//	*Message_Audio
	//	*Message_Image
	Content      isMessage_Content           `protobuf_oneof:"content"`
	CreationTime *google_protobuf1.Timestamp `protobuf:"bytes,8,opt,name=creation_time,json=creationTime" json:"creation_time,omitempty"`
	DeliveryTime *google_protobuf1.Timestamp `protobuf:"bytes,9,opt,name=delivery_time,json=deliveryTime" json:"delivery_time,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isMessage_Content interface {
	isMessage_Content()
}

type Message_Event struct {
	Event *ActionEvent `protobuf:"bytes,3,opt,name=event,oneof"`
}
type Message_Text struct {
	Text string `protobuf:"bytes,5,opt,name=text,oneof"`
}
type Message_Audio struct {
	Audio []byte `protobuf:"bytes,6,opt,name=audio,proto3,oneof"`
}
type Message_Image struct {
	Image []byte `protobuf:"bytes,7,opt,name=image,proto3,oneof"`
}

func (*Message_Event) isMessage_Content() {}
func (*Message_Text) isMessage_Content()  {}
func (*Message_Audio) isMessage_Content() {}
func (*Message_Image) isMessage_Content() {}

func (m *Message) GetContent() isMessage_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Message) GetEvent() *ActionEvent {
	if x, ok := m.GetContent().(*Message_Event); ok {
		return x.Event
	}
	return nil
}

func (m *Message) GetText() string {
	if x, ok := m.GetContent().(*Message_Text); ok {
		return x.Text
	}
	return ""
}

func (m *Message) GetAudio() []byte {
	if x, ok := m.GetContent().(*Message_Audio); ok {
		return x.Audio
	}
	return nil
}

func (m *Message) GetImage() []byte {
	if x, ok := m.GetContent().(*Message_Image); ok {
		return x.Image
	}
	return nil
}

func (m *Message) GetCreationTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreationTime
	}
	return nil
}

func (m *Message) GetDeliveryTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.DeliveryTime
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Message) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Message_OneofMarshaler, _Message_OneofUnmarshaler, _Message_OneofSizer, []interface{}{
		(*Message_Event)(nil),
		(*Message_Text)(nil),
		(*Message_Audio)(nil),
		(*Message_Image)(nil),
	}
}

func _Message_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Message)
	// content
	switch x := m.Content.(type) {
	case *Message_Event:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Event); err != nil {
			return err
		}
	case *Message_Text:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Text)
	case *Message_Audio:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Audio)
	case *Message_Image:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Image)
	case nil:
	default:
		return fmt.Errorf("Message.Content has unexpected type %T", x)
	}
	return nil
}

func _Message_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Message)
	switch tag {
	case 3: // content.event
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ActionEvent)
		err := b.DecodeMessage(msg)
		m.Content = &Message_Event{msg}
		return true, err
	case 5: // content.text
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Content = &Message_Text{x}
		return true, err
	case 6: // content.audio
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Content = &Message_Audio{x}
		return true, err
	case 7: // content.image
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Content = &Message_Image{x}
		return true, err
	default:
		return false, nil
	}
}

func _Message_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Message)
	// content
	switch x := m.Content.(type) {
	case *Message_Event:
		s := proto.Size(x.Event)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Text:
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Text)))
		n += len(x.Text)
	case *Message_Audio:
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Audio)))
		n += len(x.Audio)
	case *Message_Image:
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Image)))
		n += len(x.Image)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ActionEvent struct {
	Event ActionEvent_EventType `protobuf:"varint,1,opt,name=event,enum=chat.ActionEvent_EventType" json:"event,omitempty"`
	// Extra key:value data to provide more context to events
	// this will vary by EventType
	// example: `{ "oldTitle": "Foo", "newTitle":"Bar" }`
	ExtraParams map[string]string `protobuf:"bytes,2,rep,name=extra_params,json=extraParams" json:"extra_params,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ActionEvent) Reset()                    { *m = ActionEvent{} }
func (m *ActionEvent) String() string            { return proto.CompactTextString(m) }
func (*ActionEvent) ProtoMessage()               {}
func (*ActionEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ActionEvent) GetExtraParams() map[string]string {
	if m != nil {
		return m.ExtraParams
	}
	return nil
}

type TypingMessage struct {
	SenderUid string                   `protobuf:"bytes,1,opt,name=sender_uid,json=senderUid" json:"sender_uid,omitempty"`
	Type      TypingMessage_ActionType `protobuf:"varint,2,opt,name=type,enum=chat.TypingMessage_ActionType" json:"type,omitempty"`
}

func (m *TypingMessage) Reset()                    { *m = TypingMessage{} }
func (m *TypingMessage) String() string            { return proto.CompactTextString(m) }
func (*TypingMessage) ProtoMessage()               {}
func (*TypingMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type CreateConversationRequest struct {
	Title      string                        `protobuf:"bytes,1,opt,name=title" json:"title,omitempty"`
	Type       Conversation_ConversationType `protobuf:"varint,2,opt,name=type,enum=chat.Conversation_ConversationType" json:"type,omitempty"`
	MemberUids []string                      `protobuf:"bytes,3,rep,name=member_uids,json=memberUids" json:"member_uids,omitempty"`
	Image      []byte                        `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
}

func (m *CreateConversationRequest) Reset()                    { *m = CreateConversationRequest{} }
func (m *CreateConversationRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateConversationRequest) ProtoMessage()               {}
func (*CreateConversationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type CreateConversationResponse struct {
	Conversation *Conversation `protobuf:"bytes,1,opt,name=conversation" json:"conversation,omitempty"`
}

func (m *CreateConversationResponse) Reset()                    { *m = CreateConversationResponse{} }
func (m *CreateConversationResponse) String() string            { return proto.CompactTextString(m) }
func (*CreateConversationResponse) ProtoMessage()               {}
func (*CreateConversationResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *CreateConversationResponse) GetConversation() *Conversation {
	if m != nil {
		return m.Conversation
	}
	return nil
}

type GetConversationsRequest struct {
	Limit  int32    `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	Offset int32    `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	Uid    []string `protobuf:"bytes,3,rep,name=uid" json:"uid,omitempty"`
}

func (m *GetConversationsRequest) Reset()                    { *m = GetConversationsRequest{} }
func (m *GetConversationsRequest) String() string            { return proto.CompactTextString(m) }
func (*GetConversationsRequest) ProtoMessage()               {}
func (*GetConversationsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type GetConversationsResponse struct {
	Conversations []*Conversation `protobuf:"bytes,1,rep,name=conversations" json:"conversations,omitempty"`
}

func (m *GetConversationsResponse) Reset()                    { *m = GetConversationsResponse{} }
func (m *GetConversationsResponse) String() string            { return proto.CompactTextString(m) }
func (*GetConversationsResponse) ProtoMessage()               {}
func (*GetConversationsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *GetConversationsResponse) GetConversations() []*Conversation {
	if m != nil {
		return m.Conversations
	}
	return nil
}

type LeaveConversationRequest struct {
	ConversationUid string `protobuf:"bytes,1,opt,name=conversation_uid,json=conversationUid" json:"conversation_uid,omitempty"`
}

func (m *LeaveConversationRequest) Reset()                    { *m = LeaveConversationRequest{} }
func (m *LeaveConversationRequest) String() string            { return proto.CompactTextString(m) }
func (*LeaveConversationRequest) ProtoMessage()               {}
func (*LeaveConversationRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type MemberRequest struct {
	ConversationUid string `protobuf:"bytes,1,opt,name=conversation_uid,json=conversationUid" json:"conversation_uid,omitempty"`
	UserUid         string `protobuf:"bytes,2,opt,name=user_uid,json=userUid" json:"user_uid,omitempty"`
}

func (m *MemberRequest) Reset()                    { *m = MemberRequest{} }
func (m *MemberRequest) String() string            { return proto.CompactTextString(m) }
func (*MemberRequest) ProtoMessage()               {}
func (*MemberRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type ChatMessage struct {
	ConversationUid string `protobuf:"bytes,1,opt,name=conversation_uid,json=conversationUid" json:"conversation_uid,omitempty"`
	// Types that are valid to be assigned to Content:
	//	*ChatMessage_Typing
	//	*ChatMessage_Message
	Content isChatMessage_Content `protobuf_oneof:"content"`
}

func (m *ChatMessage) Reset()                    { *m = ChatMessage{} }
func (m *ChatMessage) String() string            { return proto.CompactTextString(m) }
func (*ChatMessage) ProtoMessage()               {}
func (*ChatMessage) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

type isChatMessage_Content interface {
	isChatMessage_Content()
}

type ChatMessage_Typing struct {
	Typing *TypingMessage `protobuf:"bytes,2,opt,name=typing,oneof"`
}
type ChatMessage_Message struct {
	Message *Message `protobuf:"bytes,3,opt,name=message,oneof"`
}

func (*ChatMessage_Typing) isChatMessage_Content()  {}
func (*ChatMessage_Message) isChatMessage_Content() {}

func (m *ChatMessage) GetContent() isChatMessage_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *ChatMessage) GetTyping() *TypingMessage {
	if x, ok := m.GetContent().(*ChatMessage_Typing); ok {
		return x.Typing
	}
	return nil
}

func (m *ChatMessage) GetMessage() *Message {
	if x, ok := m.GetContent().(*ChatMessage_Message); ok {
		return x.Message
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ChatMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ChatMessage_OneofMarshaler, _ChatMessage_OneofUnmarshaler, _ChatMessage_OneofSizer, []interface{}{
		(*ChatMessage_Typing)(nil),
		(*ChatMessage_Message)(nil),
	}
}

func _ChatMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ChatMessage)
	// content
	switch x := m.Content.(type) {
	case *ChatMessage_Typing:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Typing); err != nil {
			return err
		}
	case *ChatMessage_Message:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Message); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ChatMessage.Content has unexpected type %T", x)
	}
	return nil
}

func _ChatMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ChatMessage)
	switch tag {
	case 2: // content.typing
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TypingMessage)
		err := b.DecodeMessage(msg)
		m.Content = &ChatMessage_Typing{msg}
		return true, err
	case 3: // content.message
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Message)
		err := b.DecodeMessage(msg)
		m.Content = &ChatMessage_Message{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ChatMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ChatMessage)
	// content
	switch x := m.Content.(type) {
	case *ChatMessage_Typing:
		s := proto.Size(x.Typing)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ChatMessage_Message:
		s := proto.Size(x.Message)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type GetHistoryRequest struct {
	Limit           int32  `protobuf:"varint,1,opt,name=limit" json:"limit,omitempty"`
	Offset          int32  `protobuf:"varint,2,opt,name=offset" json:"offset,omitempty"`
	ConversationUid string `protobuf:"bytes,3,opt,name=conversation_uid,json=conversationUid" json:"conversation_uid,omitempty"`
}

func (m *GetHistoryRequest) Reset()                    { *m = GetHistoryRequest{} }
func (m *GetHistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*GetHistoryRequest) ProtoMessage()               {}
func (*GetHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type GetHistoryResponse struct {
	Messages []*Message `protobuf:"bytes,1,rep,name=messages" json:"messages,omitempty"`
}

func (m *GetHistoryResponse) Reset()                    { *m = GetHistoryResponse{} }
func (m *GetHistoryResponse) String() string            { return proto.CompactTextString(m) }
func (*GetHistoryResponse) ProtoMessage()               {}
func (*GetHistoryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetHistoryResponse) GetMessages() []*Message {
	if m != nil {
		return m.Messages
	}
	return nil
}

type ReadHistoryRequest struct {
	LastMessageUid  string `protobuf:"bytes,1,opt,name=last_message_uid,json=lastMessageUid" json:"last_message_uid,omitempty"`
	ConversationUid string `protobuf:"bytes,2,opt,name=conversation_uid,json=conversationUid" json:"conversation_uid,omitempty"`
}

func (m *ReadHistoryRequest) Reset()                    { *m = ReadHistoryRequest{} }
func (m *ReadHistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*ReadHistoryRequest) ProtoMessage()               {}
func (*ReadHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func init() {
	proto.RegisterType((*Conversation)(nil), "chat.Conversation")
	proto.RegisterType((*Message)(nil), "chat.Message")
	proto.RegisterType((*ActionEvent)(nil), "chat.ActionEvent")
	proto.RegisterType((*TypingMessage)(nil), "chat.TypingMessage")
	proto.RegisterType((*CreateConversationRequest)(nil), "chat.CreateConversationRequest")
	proto.RegisterType((*CreateConversationResponse)(nil), "chat.CreateConversationResponse")
	proto.RegisterType((*GetConversationsRequest)(nil), "chat.GetConversationsRequest")
	proto.RegisterType((*GetConversationsResponse)(nil), "chat.GetConversationsResponse")
	proto.RegisterType((*LeaveConversationRequest)(nil), "chat.LeaveConversationRequest")
	proto.RegisterType((*MemberRequest)(nil), "chat.MemberRequest")
	proto.RegisterType((*ChatMessage)(nil), "chat.ChatMessage")
	proto.RegisterType((*GetHistoryRequest)(nil), "chat.GetHistoryRequest")
	proto.RegisterType((*GetHistoryResponse)(nil), "chat.GetHistoryResponse")
	proto.RegisterType((*ReadHistoryRequest)(nil), "chat.ReadHistoryRequest")
	proto.RegisterEnum("chat.Conversation_ConversationType", Conversation_ConversationType_name, Conversation_ConversationType_value)
	proto.RegisterEnum("chat.ActionEvent_EventType", ActionEvent_EventType_name, ActionEvent_EventType_value)
	proto.RegisterEnum("chat.TypingMessage_ActionType", TypingMessage_ActionType_name, TypingMessage_ActionType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for MessageService service

type MessageServiceClient interface {
	// Return the history of messages for an conversation in DESC order.
	GetHistory(ctx context.Context, in *GetHistoryRequest, opts ...grpc.CallOption) (*GetHistoryResponse, error)
	// Notifies the reading of messages from a channel or a user.
	ReadHistory(ctx context.Context, in *ReadHistoryRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	// Send and receive Messages or events to/from conversations.
	Comunicate(ctx context.Context, opts ...grpc.CallOption) (MessageService_ComunicateClient, error)
}

type messageServiceClient struct {
	cc *grpc.ClientConn
}

func NewMessageServiceClient(cc *grpc.ClientConn) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) GetHistory(ctx context.Context, in *GetHistoryRequest, opts ...grpc.CallOption) (*GetHistoryResponse, error) {
	out := new(GetHistoryResponse)
	err := grpc.Invoke(ctx, "/chat.MessageService/GetHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) ReadHistory(ctx context.Context, in *ReadHistoryRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/chat.MessageService/ReadHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) Comunicate(ctx context.Context, opts ...grpc.CallOption) (MessageService_ComunicateClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_MessageService_serviceDesc.Streams[0], c.cc, "/chat.MessageService/Comunicate", opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceComunicateClient{stream}
	return x, nil
}

type MessageService_ComunicateClient interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ClientStream
}

type messageServiceComunicateClient struct {
	grpc.ClientStream
}

func (x *messageServiceComunicateClient) Send(m *ChatMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageServiceComunicateClient) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for MessageService service

type MessageServiceServer interface {
	// Return the history of messages for an conversation in DESC order.
	GetHistory(context.Context, *GetHistoryRequest) (*GetHistoryResponse, error)
	// Notifies the reading of messages from a channel or a user.
	ReadHistory(context.Context, *ReadHistoryRequest) (*google_protobuf.Empty, error)
	// Send and receive Messages or events to/from conversations.
	Comunicate(MessageService_ComunicateServer) error
}

func RegisterMessageServiceServer(s *grpc.Server, srv MessageServiceServer) {
	s.RegisterService(&_MessageService_serviceDesc, srv)
}

func _MessageService_GetHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.MessageService/GetHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetHistory(ctx, req.(*GetHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_ReadHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).ReadHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.MessageService/ReadHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).ReadHistory(ctx, req.(*ReadHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_Comunicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageServiceServer).Comunicate(&messageServiceComunicateServer{stream})
}

type MessageService_ComunicateServer interface {
	Send(*ChatMessage) error
	Recv() (*ChatMessage, error)
	grpc.ServerStream
}

type messageServiceComunicateServer struct {
	grpc.ServerStream
}

func (x *messageServiceComunicateServer) Send(m *ChatMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageServiceComunicateServer) Recv() (*ChatMessage, error) {
	m := new(ChatMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _MessageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHistory",
			Handler:    _MessageService_GetHistory_Handler,
		},
		{
			MethodName: "ReadHistory",
			Handler:    _MessageService_ReadHistory_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Comunicate",
			Handler:       _MessageService_Comunicate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

// Client API for ConversationService service

type ConversationServiceClient interface {
	// Return conversations ordered by last update date
	Get(ctx context.Context, in *GetConversationsRequest, opts ...grpc.CallOption) (*GetConversationsResponse, error)
	Create(ctx context.Context, in *CreateConversationRequest, opts ...grpc.CallOption) (*CreateConversationResponse, error)
	Leave(ctx context.Context, in *LeaveConversationRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	AddMember(ctx context.Context, in *MemberRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	RemoveMember(ctx context.Context, in *MemberRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type conversationServiceClient struct {
	cc *grpc.ClientConn
}

func NewConversationServiceClient(cc *grpc.ClientConn) ConversationServiceClient {
	return &conversationServiceClient{cc}
}

func (c *conversationServiceClient) Get(ctx context.Context, in *GetConversationsRequest, opts ...grpc.CallOption) (*GetConversationsResponse, error) {
	out := new(GetConversationsResponse)
	err := grpc.Invoke(ctx, "/chat.ConversationService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) Create(ctx context.Context, in *CreateConversationRequest, opts ...grpc.CallOption) (*CreateConversationResponse, error) {
	out := new(CreateConversationResponse)
	err := grpc.Invoke(ctx, "/chat.ConversationService/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) Leave(ctx context.Context, in *LeaveConversationRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/chat.ConversationService/Leave", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) AddMember(ctx context.Context, in *MemberRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/chat.ConversationService/AddMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) RemoveMember(ctx context.Context, in *MemberRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/chat.ConversationService/RemoveMember", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ConversationService service

type ConversationServiceServer interface {
	// Return conversations ordered by last update date
	Get(context.Context, *GetConversationsRequest) (*GetConversationsResponse, error)
	Create(context.Context, *CreateConversationRequest) (*CreateConversationResponse, error)
	Leave(context.Context, *LeaveConversationRequest) (*google_protobuf.Empty, error)
	AddMember(context.Context, *MemberRequest) (*google_protobuf.Empty, error)
	RemoveMember(context.Context, *MemberRequest) (*google_protobuf.Empty, error)
}

func RegisterConversationServiceServer(s *grpc.Server, srv ConversationServiceServer) {
	s.RegisterService(&_ConversationService_serviceDesc, srv)
}

func _ConversationService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConversationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ConversationService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).Get(ctx, req.(*GetConversationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ConversationService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).Create(ctx, req.(*CreateConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_Leave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LeaveConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).Leave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ConversationService/Leave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).Leave(ctx, req.(*LeaveConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_AddMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).AddMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ConversationService/AddMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).AddMember(ctx, req.(*MemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_RemoveMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).RemoveMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ConversationService/RemoveMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).RemoveMember(ctx, req.(*MemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConversationService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ConversationService",
	HandlerType: (*ConversationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ConversationService_Get_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ConversationService_Create_Handler,
		},
		{
			MethodName: "Leave",
			Handler:    _ConversationService_Leave_Handler,
		},
		{
			MethodName: "AddMember",
			Handler:    _ConversationService_AddMember_Handler,
		},
		{
			MethodName: "RemoveMember",
			Handler:    _ConversationService_RemoveMember_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("chat.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1097 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x56, 0xdd, 0x6e, 0xe2, 0x46,
	0x14, 0xc6, 0xe6, 0x27, 0xcb, 0x31, 0x24, 0xce, 0x24, 0xcd, 0x7a, 0x59, 0xed, 0x06, 0xb9, 0x37,
	0xe4, 0x62, 0xd9, 0x96, 0x4a, 0x6d, 0xb4, 0x55, 0x1b, 0x79, 0xc1, 0x25, 0x54, 0x10, 0xd0, 0xd4,
	0x44, 0xda, 0x2b, 0xe4, 0xe0, 0x49, 0xd6, 0x5d, 0x8c, 0x29, 0x1e, 0xd0, 0xf2, 0x00, 0x7d, 0x8c,
	0x5e, 0xf4, 0x2d, 0xfa, 0x14, 0x6d, 0xa5, 0xbe, 0x45, 0x9f, 0xa2, 0x9a, 0x19, 0x3b, 0x0c, 0x7f,
	0xbb, 0xca, 0xf6, 0x06, 0xf9, 0x7c, 0xf3, 0x9d, 0xe3, 0x73, 0xbe, 0x39, 0xe7, 0x18, 0x80, 0xe1,
	0x5b, 0x97, 0x56, 0x27, 0xd3, 0x90, 0x86, 0x28, 0xc3, 0x9e, 0x4b, 0x4f, 0xef, 0xc2, 0xf0, 0x6e,
	0x44, 0x5e, 0x72, 0xec, 0x66, 0x76, 0xfb, 0x92, 0x04, 0x13, 0xba, 0x10, 0x94, 0xd2, 0xe9, 0xfa,
	0x21, 0xf5, 0x03, 0x12, 0x51, 0x37, 0x98, 0x08, 0x82, 0xf9, 0x8f, 0x0a, 0x85, 0x7a, 0x38, 0x9e,
	0x93, 0x69, 0xe4, 0x52, 0x3f, 0x1c, 0x23, 0x1d, 0xd2, 0x33, 0xdf, 0x33, 0x94, 0xb2, 0x52, 0xc9,
	0x63, 0xf6, 0x88, 0x8e, 0x21, 0x4b, 0x7d, 0x3a, 0x22, 0x86, 0xca, 0x31, 0x61, 0xa0, 0x6f, 0x20,
	0x43, 0x17, 0x13, 0x62, 0xa4, 0xcb, 0x4a, 0x65, 0xbf, 0xf6, 0x79, 0x95, 0xe7, 0x25, 0x47, 0x5a,
	0x31, 0x9c, 0xc5, 0x84, 0x60, 0xee, 0x80, 0x4e, 0x41, 0x0b, 0x48, 0x70, 0x43, 0xa6, 0x83, 0x99,
	0xef, 0x45, 0x46, 0xa6, 0x9c, 0xae, 0xe4, 0x31, 0x08, 0xa8, 0xef, 0x7b, 0x11, 0x7b, 0x9f, 0x1f,
	0xb8, 0x77, 0xc4, 0xc8, 0x96, 0x95, 0x4a, 0x01, 0x0b, 0x03, 0x5d, 0x40, 0x71, 0x38, 0x25, 0x3c,
	0xd8, 0x80, 0x15, 0x61, 0x1c, 0x97, 0x95, 0x8a, 0x56, 0x2b, 0x55, 0x45, 0x85, 0xd5, 0xa4, 0xc2,
	0xaa, 0x93, 0x54, 0x88, 0x0b, 0x89, 0x03, 0x83, 0xd0, 0xb7, 0xa0, 0xcd, 0x26, 0x9e, 0x4b, 0x89,
	0x70, 0xff, 0xec, 0xa3, 0xee, 0x20, 0xe8, 0x0c, 0x30, 0x5f, 0x80, 0xbe, 0x5e, 0x0e, 0xda, 0x07,
	0x68, 0x5d, 0x35, 0x5a, 0xd7, 0xad, 0x46, 0xdf, 0x6a, 0xeb, 0x29, 0x94, 0x87, 0x6c, 0x13, 0x77,
	0xfb, 0x3d, 0x5d, 0x31, 0xff, 0x50, 0x61, 0xaf, 0x43, 0xa2, 0x88, 0x25, 0xbe, 0x29, 0xe8, 0x33,
	0x80, 0x88, 0x8c, 0x3d, 0xa1, 0x40, 0xac, 0x6a, 0x5e, 0x20, 0x7d, 0xdf, 0x43, 0x67, 0x90, 0x25,
	0x73, 0x32, 0xa6, 0x5c, 0x5a, 0xad, 0x76, 0x28, 0xa4, 0xb5, 0x86, 0xec, 0xc5, 0x36, 0x3b, 0xb8,
	0x4c, 0x61, 0xc1, 0x40, 0xc7, 0x90, 0xa1, 0xe4, 0x3d, 0xe5, 0x4a, 0xe5, 0x2f, 0x53, 0x98, 0x5b,
	0xe8, 0x04, 0xb2, 0xee, 0xcc, 0xf3, 0x43, 0x23, 0xc7, 0x04, 0x64, 0x6c, 0x6e, 0x32, 0x5c, 0x08,
	0xbb, 0x97, 0xe0, 0x3b, 0xa4, 0x7d, 0xf4, 0x40, 0x69, 0x2f, 0xa0, 0xe8, 0x91, 0x91, 0x3f, 0x27,
	0xd3, 0x85, 0x08, 0x90, 0xff, 0x78, 0x80, 0xc4, 0x81, 0x41, 0xaf, 0xf3, 0xb0, 0x37, 0x0c, 0xc7,
	0x94, 0x8c, 0xa9, 0xf9, 0x97, 0x0a, 0x9a, 0x54, 0x2b, 0xfa, 0x32, 0x51, 0x43, 0xe1, 0x8d, 0xf6,
	0x74, 0x43, 0x8d, 0x2a, 0xff, 0xe5, 0x0d, 0x16, 0xab, 0x62, 0x43, 0x81, 0xbc, 0xa7, 0x53, 0x77,
	0x30, 0x71, 0xa7, 0x6e, 0x10, 0x19, 0x6a, 0x39, 0x5d, 0xd1, 0x6a, 0xe6, 0x16, 0x4f, 0xc6, 0xea,
	0x71, 0x92, 0x3d, 0xa6, 0xd3, 0x05, 0xd6, 0xc8, 0x12, 0x29, 0x7d, 0x0f, 0xfa, 0x3a, 0x81, 0x5d,
	0xe6, 0x3b, 0xb2, 0x48, 0x2e, 0xf3, 0x1d, 0x59, 0xb0, 0x6e, 0x9d, 0xbb, 0xa3, 0xd9, 0xfd, 0x74,
	0x70, 0xe3, 0x95, 0x7a, 0xae, 0x98, 0xbf, 0x2a, 0x90, 0xbf, 0xcf, 0x0d, 0x1d, 0x42, 0xb1, 0x8e,
	0x6d, 0xcb, 0xb1, 0x1b, 0x03, 0xd1, 0x25, 0x29, 0x06, 0xf5, 0x7b, 0x0d, 0x09, 0x52, 0x58, 0x4f,
	0xfd, 0xd8, 0x6d, 0x5d, 0xc5, 0xb6, 0x8a, 0x0e, 0x40, 0x6b, 0xdb, 0xd6, 0xb5, 0x1d, 0x03, 0x69,
	0x46, 0xb0, 0x1a, 0x8d, 0x41, 0xc7, 0xee, 0xbc, 0xb6, 0xb1, 0x9e, 0x61, 0x31, 0xb0, 0xdd, 0xe9,
	0x5e, 0xdb, 0x09, 0x94, 0x65, 0x14, 0xbb, 0xd1, 0x72, 0x06, 0x4e, 0xcb, 0x69, 0xdb, 0x7a, 0xce,
	0xfc, 0x53, 0x81, 0xa2, 0xb3, 0x98, 0xf8, 0xe3, 0xbb, 0xa4, 0x25, 0x57, 0x1b, 0x50, 0x59, 0x6f,
	0xc0, 0x5a, 0x3c, 0xda, 0x2a, 0x57, 0xfc, 0xb9, 0xd0, 0x6d, 0x25, 0x42, 0xac, 0xe2, 0x72, 0xaa,
	0xcd, 0x9f, 0x01, 0x96, 0x18, 0x2f, 0xd6, 0xba, 0xaa, 0xdb, 0xed, 0x81, 0xf3, 0xa6, 0xd7, 0xba,
	0x6a, 0xea, 0x29, 0x04, 0x90, 0x8b, 0x9f, 0x15, 0x74, 0x04, 0x07, 0xd8, 0xae, 0x77, 0x71, 0xa3,
	0x75, 0xd5, 0x1c, 0x58, 0xfd, 0x46, 0xab, 0xab, 0xab, 0x0c, 0xec, 0xf7, 0xda, 0x5d, 0x4b, 0x02,
	0xd3, 0xab, 0x60, 0xef, 0xb2, 0xeb, 0x74, 0xf5, 0x8c, 0xf9, 0xbb, 0x02, 0x4f, 0xea, 0xac, 0xff,
	0x88, 0x3c, 0x93, 0x98, 0xfc, 0x32, 0x23, 0x11, 0x5d, 0xae, 0x2b, 0x65, 0xdb, 0xba, 0x52, 0xff,
	0xe7, 0xba, 0x4a, 0xef, 0x5e, 0x57, 0x19, 0x69, 0x5d, 0x99, 0x0e, 0x94, 0xb6, 0xa5, 0x18, 0x4d,
	0xc2, 0x71, 0x44, 0xd0, 0xd7, 0x50, 0x18, 0x4a, 0x38, 0x4f, 0x55, 0xab, 0xa1, 0xcd, 0xac, 0xf0,
	0x0a, 0xcf, 0x7c, 0x03, 0x8f, 0x9b, 0x84, 0xca, 0x84, 0x48, 0x2a, 0x7b, 0xe4, 0x07, 0xbe, 0x98,
	0x93, 0x2c, 0x16, 0x06, 0x3a, 0x81, 0x5c, 0x78, 0x7b, 0x1b, 0x11, 0xca, 0x0b, 0xcf, 0xe2, 0xd8,
	0x4a, 0x96, 0x92, 0xa8, 0x86, 0x3d, 0x9a, 0x0e, 0x18, 0x9b, 0xa1, 0xe3, 0x74, 0xcf, 0xa1, 0x28,
	0xa7, 0x11, 0x19, 0x0a, 0x9f, 0xa8, 0x6d, 0xf9, 0xae, 0x12, 0x4d, 0x1b, 0x8c, 0x36, 0x71, 0xe7,
	0x5b, 0x2f, 0xea, 0x0c, 0x74, 0x99, 0x2c, 0xf5, 0xe2, 0x81, 0x8c, 0xf7, 0x7d, 0xcf, 0xec, 0x43,
	0xb1, 0xc3, 0x15, 0x7f, 0xb8, 0x2f, 0x7a, 0x02, 0x8f, 0x66, 0xd1, 0xca, 0xae, 0xdd, 0x63, 0x36,
	0x0b, 0xfb, 0x9b, 0x02, 0x5a, 0xfd, 0xad, 0x4b, 0x93, 0xb9, 0x78, 0x40, 0xd4, 0x17, 0x90, 0xa3,
	0x7c, 0x22, 0x78, 0x4c, 0xad, 0x76, 0xb4, 0x65, 0x4a, 0x2e, 0x53, 0x38, 0x26, 0xa1, 0x33, 0xd8,
	0x0b, 0x04, 0x18, 0x6f, 0xf5, 0xa2, 0xe0, 0x2f, 0x99, 0xc9, 0xb9, 0xbc, 0x0b, 0x47, 0x70, 0xd8,
	0x24, 0xf4, 0xd2, 0x8f, 0x68, 0x38, 0x5d, 0x7c, 0xda, 0x45, 0x6f, 0x2b, 0x29, 0xbd, 0x5d, 0xe4,
	0x0b, 0x40, 0xf2, 0xdb, 0xe2, 0xbb, 0x3f, 0x83, 0x47, 0x71, 0x66, 0xc9, 0xb5, 0xaf, 0xa6, 0x8e,
	0xef, 0x8f, 0x4d, 0x1f, 0x10, 0x26, 0xae, 0xb7, 0x96, 0x6f, 0x05, 0xf4, 0x91, 0x1b, 0xd1, 0x41,
	0x4c, 0x93, 0x44, 0xdd, 0x67, 0x78, 0x1c, 0x46, 0x7c, 0xf8, 0x36, 0x73, 0x55, 0xb7, 0xe6, 0x5a,
	0xfb, 0x5b, 0x81, 0xfd, 0xd8, 0xf3, 0x27, 0x32, 0x9d, 0xfb, 0x43, 0x82, 0x2c, 0x80, 0x65, 0xfa,
	0xe8, 0xb1, 0x48, 0x72, 0x43, 0xbe, 0x92, 0xb1, 0x79, 0x20, 0x2a, 0x35, 0x53, 0xc8, 0x02, 0x4d,
	0x2a, 0x00, 0xc5, 0xd4, 0xcd, 0x9a, 0x4a, 0x27, 0x1b, 0x5f, 0x36, 0x9b, 0xfd, 0xe9, 0x32, 0x53,
	0xe8, 0x1c, 0xa0, 0x1e, 0x06, 0xb3, 0xb1, 0x3f, 0x74, 0x29, 0x41, 0xf1, 0xb7, 0x5b, 0xea, 0xb1,
	0xd2, 0x26, 0x64, 0xa6, 0x2a, 0xca, 0x17, 0x4a, 0xed, 0x5f, 0x15, 0x8e, 0xe4, 0x31, 0x49, 0xea,
	0xfa, 0x01, 0xd2, 0x4d, 0x42, 0xd1, 0xb3, 0xfb, 0xbc, 0xb7, 0x8d, 0x7f, 0xe9, 0xf9, 0xae, 0xe3,
	0xfb, 0xe2, 0x3a, 0x90, 0x13, 0x1b, 0x09, 0x9d, 0xc6, 0x29, 0xec, 0x5a, 0xa1, 0xa5, 0xf2, 0x6e,
	0x82, 0xa4, 0x55, 0x96, 0x4f, 0x36, 0x8a, 0xdf, 0xbc, 0x6b, 0xcc, 0x3f, 0xa0, 0xd5, 0x2b, 0xc8,
	0x5b, 0x9e, 0x27, 0x06, 0x1b, 0x1d, 0x25, 0x5d, 0x25, 0x8d, 0xf9, 0x07, 0x7c, 0xbf, 0x83, 0x02,
	0x26, 0x41, 0x38, 0x27, 0x9f, 0xe4, 0x7e, 0x93, 0xe3, 0xc8, 0x57, 0xff, 0x05, 0x00, 0x00, 0xff,
	0xff, 0x37, 0x91, 0xd3, 0x64, 0x4f, 0x0b, 0x00, 0x00,
}
